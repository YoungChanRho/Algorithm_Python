# 1216_회문
# 220816

'''
"기러기" 또는 "level" 과 같이 거꾸로 읽어도 제대로 읽은 것과 같은 문장이나 낱말을 회문(回文, palindrome)이라 한다.
주어진 100x100 평면 글자판에서 가로, 세로를 모두 보아 가장 긴 회문의 길이를 구하는 문제이다.
위와 같은 글자 판이 주어졌을 때, 길이가 가장 긴 회문은 붉은색 테두리로 표시된 7칸짜리 회문이다.
예시의 경우 설명을 위해 글자판의 크기가 100 x 100이 아닌 8 x 8으로 주어졌음에 주의한다.


각 칸의 들어가는 글자는 c언어 char type으로 주어지며 'A', 'B', 'C' 중 하나이다.
글자 판은 무조건 정사각형으로 주어진다.
ABA도 회문이며, ABBA도 회문이다. A또한 길이 1짜리 회문이다.
가로, 세로 각각에 대해서 직선으로만 판단한다. 즉, 아래 예에서 노란색 경로를 따라가면 길이 7짜리 회문이 되지만 직선이 아니기 때문에 인정되지 않는다. 
 
각 테스트 케이스의 첫 번째 줄에는 테스트 케이스의 번호가 주어지며, 바로 다음 줄에 테스트 케이스가 주어진다.
총 10개의 테스트케이스가 주어진다.

#부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 찾은 회문의 길이를 출력한다.
'''

# 재승님 코드 참고, 가장 이해가 쉽고 효율적이라고 생각하여 재승님 코드를 바탕으로 공부를 했다.
# 난 인덱스 값을 바탕으로 일일이 비교하며 문제를 풀어나갔는데, 슬라이싱을 활용해 회문을 확인할 수 있는 것을 배웠다.
import sys
sys.stdin = open('input.txt','r')

T = 10
for tc in range(1,T+1):
    tc = int(input())
    arr = [input() for _ in range(100)]

    answer = 0
    # i가 오름차순으로 계속 증가하여 결국에는 가장 큰 값이 나올 것 이다.
    for i in range(2,100):
        # 행 방향에 대한 탐색
        for j in range(100):
            for k in range(100-i+1):
                # 문자열을 길이(i)만큼 슬라이싱 해주고, 슬라이싱한 문자열을 뒤집었을 때 같다면 회문
                if arr[j][k:k+i] == arr[j][k:k+i][::-1]:
                    # i가 계속 증가하기 때문에 answer 값 역시 계속 증가할 것이다.
                    answer = i
        # 열 방향에 대한 탐색
        for l in range(100):
            for m in range(100-i+1):
                # 열 방향으로 탐색할 경우, 문자를 temp라는 임의 변수에 넣어준다.
                temp = ''
                for k in range(i):
                    temp += arr[m+k][l]
                if temp == temp[::-1]:
                    answer = i
                    break
    print('#{} {}'.format(tc, answer))