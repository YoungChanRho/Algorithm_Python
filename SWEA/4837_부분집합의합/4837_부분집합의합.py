# 부분집합의 합
# 220811
'''
1부터 12까지의 숫자를 원소로 가진 집합 A가 있다. 집합 A의 부분 집합 중 N개의 원소를 갖고 있고, 원소의 합이 K인 부분집합의 개수를 출력하는 프로그램을 작성하시오.
해당하는 부분집합이 없는 경우 0을 출력한다. 모든 부분 집합을 만들어 답을 찾아도 된다.
예를 들어 N = 3, K = 6 경우, 부분집합은 { 1, 2, 3 } 경우 1가지가 존재한다.

첫 줄에 테스트 케이스 개수 T가 주어진다.  ( 1 ≤ T ≤ 50 )
테스트 케이스 별로 부분집합 원소의 수 N과 부분 집합의 합 K가 여백을 두고 주어진다. ( 1 ≤ N ≤ 12, 1 ≤ K ≤ 100 )
'''
import sys
sys.stdin = open('sample_input.txt','r')

T = int(input())

for tc in range(1, T+1):
    N, K = map(int,input().split())
    # N: 원소의 개수
    # K: 원소의 합
    # if N과 len(lst)의 개수가 일치하는 것이 있다면
    # 해당 부분집합에 대해서 합을 구해주고
    # K와의 일치여부를 확인하는데, 확인해서 맞을 때 마다 cnt의 개수를 하나씩 올려주면 된다.
    # cnt는 초기화 되면 안되니까 for문 밖에...
    A = [1,2,3,4,5,6,7,8,9,10,11,12]
    cnt = 0

    for i in range(1<<12):
        # = for i in range(2^12)
        # 최상단의 for문이 돌때마다 lst초기화해서, lst에는 부분집합 하나하나가 계속 담기게 됨
        lst = []
        sum_1 = 0
        # K와 비교해주기 위해서
        for j in range(12):
            if i&(1<<j):
                lst.append(A[j])
        # 여기까지 시행하면 ? -> lst에 하나의 부분집합이 담긴 상태?
        if N == len(lst):
            # N과 부분집합의 길이가 같다면
            for w in range(len(lst)):
                sum_1 += lst[w]
                # 부분집합 원소들의 합을 구하는 과정
            if sum_1 == K:
                # 그리고 K와 sum_1이 같다면
                cnt += 1
            # 왜 해당 if문을 for문 안에 넣었을 때와 for 밖으로 뺏을 때 값이 다르게 나오는가
            # if가 상위 for문 안에 있을 경우에는 변경되는 w값 하나하나에 대해 적용, 즉 sum_1이 완전하지 않은 상태에서
            # K와 비교를 하게 된다. 상위 for문을 다 돌고 나와야, sum_1을 K와 비교할 수 있게 된다.
    print('#{} {}'.format(tc,cnt))

    # 원소의 개수가 N 이고, 부분집합의 합이 K인 것